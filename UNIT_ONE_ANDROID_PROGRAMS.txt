Q)Implement an application which takes inout from user and prints the table of the value

//In XML,use one EditText--to take input value and one TextView--to display the table

//MainActivity.java
public class MainActivity extends Activity {
TextView txtOne;
EditText edt;
Button btn;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

         btn = (Button)findViewById(R.id.btnOne);
         txtOne =(TextView)findViewById(R.id.txtTwo);
         edt =(EditText)findViewById(edtOne);

        btn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
				int num1 = Integer.parseInt(edt.getText().toString());
                 String result;
				 for (int i = 1; i <= 10; i++) {
                        result = (num1 + "      X     " + i + "      =     " + i * num1);
                        txtOne.append("\n" + result);
                    }
            }
        });
    }
}


Q)Implement an application that accepts the user input with the help Checkbox object and displays the selected value
//In XML file,use three checkboxes--to display option and one TextView--to display the selected value

//MainActivity.java

public class MainActivity extends Activity {
    CheckBox c1, c2, c3;
    TextView tv="";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        c1 = (CheckBox) findViewById(R.id.c1);
        c2 = (CheckBox) findViewById(R.id.c2);
        c3 = (CheckBox) findViewById(R.id.c3);
        //TextView is used to display
	tv = (TextView) findViewById(R.id.tv);
    }

    public void CheckBoxClicked(View view) {
        boolean checked = ((CheckBox) view).isChecked();

        switch ((view.getId())) {
            case R.id.c1: //c1 is the object created on top of onCreate()
                if (checked) {
		    tv.append("English Selected");
                    Toast.makeText(getApplicationContext(), "English is selected", Toast.LENGTH_LONG).show();
                    break;
					
                }
            case R.id.c2:
                if (checked) {
		    tv.append("Marathi Selected");
                    Toast.makeText(getApplicationContext(), "Marathi is selected", Toast.LENGTH_LONG).show();
                    break;
                }
            case R.id.c3:
                if (checked) {
		    tv.append("Hindi Selected");
                    Toast.makeText(getApplicationContext(), "Hindi is selected", Toast.LENGTH_LONG).show();
                    break;
                }
        }
    }
}


Q)Implement an application that accepts the user input with the help RadioButton object and displays the selected value
//In XML file,use three radiobutton--to display option, one radiogroup--for grouping the radiobutton to get single selection option and one TextView--to display the selected value

//MainActivity.java
//RADIOBUTTON PROGRAM

public class MainActivity extends AppCompatActivity {
    RadioGroup r1;
    RadioButton rb1,rb2;
	TextView tv;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        r1 = (RadioGroup) findViewById(R.id.r1);
        rb1 = (RadioButton) findViewById(R.id.rb1);
        rb2 = (RadioButton) findViewById(R.id.rb2);
	//TextView is used to display
	tv = (TextView) findViewById(R.id.tv);	
    }
//In XML,apply the function name--RadioButtonClicked in the properties of radiobutton,not in radiogroup. 
   public void RadioButtonClicked(View view){
        boolean checked=((RadioButton)view).isChecked();
			
        switch ((view.getId())){
            case R.id.rb1:
                if(checked){
                    tv.setText("Male");
		    Toast.makeText(getApplicationContext(),"Male is selected",Toast.LENGTH_LONG).show();
                    break;
					
                }
            case R.id.rb2:
                if(checked){
                    tv.setText("Female");
		    Toast.makeText(getApplicationContext(),"Female is selected",Toast.LENGTH_LONG).show();
                    break;
                }
        }
    }

}


Q)Implement an application that works with toggle button
//In XML file,use one ToggleButton and one TextView--to display the selected value

//MainActivity.java

public class MainActivity extends AppCompatActivity {
    ToggleButton t1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        t1=(ToggleButton)findViewById(R.id.t1);

        t1.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
                if (isChecked) {
                    Toast.makeText(getApplicationContext(), "The button is on", Toast.LENGTH_LONG).show();
                } else {
                    Toast.makeText(getApplicationContext(), "The button is off", Toast.LENGTH_LONG).show();
		//try to display the data in textview also
                }
            }
        });
    }
}



Q)Implement an application that works with listview
//In XML file,use one ListView--to display the selected value

//MainActivity.java
public class MainActivity extends AppCompatActivity {

    String [] tycs ={"A","B","C","D"};
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
         ArrayAdapter ad = new ArrayAdapter(this,R.layout.listview,tycs);
        ListView l=(ListView)findViewById(R.id.demo);
        l.setAdapter(ad);
    }
}


Q)Implement an application that works with Gridview(displays data in row and column)
//In XML file,use one GridView--to display the selected value

//MainActivity.java
public class MainActivity extends AppCompatActivity {

    String[] numbers = new String[] {
            "A", "B", "C", "D", "E",
            "F", "G", "H", "I", "J",
            "K", "L", "M", "N", "O",
            "P", "Q", "R", "S", "T",
            "U", "V", "W", "X", "Y", "Z"};

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        GridView gridView = (GridView) findViewById(R.id.gridview);
		
			    //parameters of ArrayAdapter-------(place to display,layout in which data to be shown,collection)
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1, numbers);

        gridView.setAdapter(adapter);

        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            public void onItemClick(AdapterView<?> parent, View v,int position, long id) {
		String item = parent.getItemAtPosition(position).toString();
                Toast.makeText(getApplicationContext(),"Selected item:"+item, Toast.LENGTH_SHORT).show();
            }
        });
}
}


Q)Implement an application that works with Spinner
//In XML file,use one Spinner--to display the selected value

//MainActivity.java
public class MainActivity extends Activity implements AdapterView.OnItemSelectedListener {
    String [] items ={"Computer","PenDrives","HardDisk","USB Cable"};
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Spinner element
        Spinner spinner = (Spinner) findViewById(R.id.spinner);

        // Spinner click listener
        spinner.setOnItemSelectedListener(this);
        // Creating adapter for spinner
        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, items);

        // attaching data adapter to spinner
        spinner.setAdapter(dataAdapter);
}//closing onCreate() 

    public void onItemSelected(AdapterView parent, View view, int position, long id) {
        // On selecting a spinner item
        String item = parent.getItemAtPosition(position).toString();
        // Showing selected spinner item
        Toast.makeText(parent.getContext(), "Selected: " + item, Toast.LENGTH_LONG).show();
     }
    public void onNothingSelected(AdapterView<?> arg0) {
        // TODO Auto-generated method stub
    }
}//closing class


Q)Implement an application that works with AutoCompleteTextView
//In XML file,use one AutoCompleteTextView--to display the entire text on one alphabet and one TextView--to show the selected value

//MainActivity.java
//AutoCompleteTextView Program 


public class MainActivity extends Activity {  
    String[] language ={"C","C++","Java",".NET","iPhone","Android","ASP.NET","PHP"};  
    @Override  
    protected void onCreate(Bundle savedInstanceState) {  
        super.onCreate(savedInstanceState);  
        setContentView(R.layout.activity_main);  
        //Getting the instance of AutoCompleteTextView  
		AutoCompleteTextView actv= (AutoCompleteTextView)findViewById(R.id.autoCompleteTextView1);  
       
	   
	   //Creating the instance of ArrayAdapter containing list of language names  
           ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,android.R.layout.select_dialog_item,language);  
         
          //setThreshold(position of character)--is used to find the text based on the position of character used.
           actv.setThreshold(1); //will start working from first character  
           actv.setAdapter(adapter); //setting the adapter data into the AutoCompleteTextView  
           actv.setTextColor(Color.RED); //highlighting the character                 
    }
}	

Q)Implement an application that works with Date and Time picker
//In XML file,use two buttons--to work with date picker and time picker and two TextView--to show the selected value

//MainActivity.java
//Date and TimePicker

public class MainActivity extends Activity implements View.OnClickListener {

    Button btnDatePicker, btnTimePicker;
    EditText txtDate, txtTime;
    private int mYear, mMonth, mDay, mHour, mMinute;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        btnDatePicker=(Button)findViewById(R.id.btn_date);
        btnTimePicker=(Button)findViewById(R.id.btn_time);
        txtDate=(EditText)findViewById(R.id.in_date);
        txtTime=(EditText)findViewById(R.id.in_time);

        btnDatePicker.setOnClickListener(this);
        btnTimePicker.setOnClickListener(this);

    }

    @Override
    public void onClick(View v) {

        if (v == btnDatePicker) {
            // Get Current Date
            final Calendar c = Calendar.getInstance();
            mYear = c.get(Calendar.YEAR);
            mMonth = c.get(Calendar.MONTH);
            mDay = c.get(Calendar.DAY_OF_MONTH);


            DatePickerDialog datePickerDialog = new DatePickerDialog(this,new DatePickerDialog.OnDateSetListener() {

                        @Override
                        public void onDateSet(DatePicker view, int year,
                                              int monthOfYear, int dayOfMonth) {

                            txtDate.setText(dayOfMonth + "-" + (monthOfYear + 1) + "-" + year);

                        }
                    }, mYear, mMonth, mDay);
            datePickerDialog.show();
        }
        if (v == btnTimePicker) {

            // Get Current Time
            final Calendar c = Calendar.getInstance();
            mHour = c.get(Calendar.HOUR_OF_DAY);
            mMinute = c.get(Calendar.MINUTE);

            // Launch Time Picker Dialog
            TimePickerDialog timePickerDialog = new TimePickerDialog(this,new TimePickerDialog.OnTimeSetListener() {

                        @Override
                        public void onTimeSet(TimePicker view, int hourOfDay,int minute) {

                            txtTime.setText(hourOfDay + ":" + minute);
                        }
                    }, mHour, mMinute, false);
            timePickerDialog.show();
        }
    }
}